// Generated by Flexc++ V0.98.00 on Wed, 12 Mar 2014 15:22:25 +0530

#ifndef Scanner_H_INCLUDED_
#define Scanner_H_INCLUDED_

// $insert baseclass_h
#include "scannerbase.h"
#include "ast.hh"
#include "parserbase.h"
#include <string.h>



// $insert classHead
class Scanner: public ScannerBase
{
    public:
        explicit Scanner(std::istream &in = std::cin,
                                std::ostream &out = std::cout);

        Scanner(std::string const &infile, std::string const &outfile);
        
        // $insert lexFunctionDecl
        int lex();
        ParserBase::STYPE__ * getSval();
        void setSval(ParserBase::STYPE__ * val);
        int get_scan_line_number();
        void display_token(int token_code);
        void store_token_name(string name);

    private:
        string token_name;
        ParserBase::STYPE__ * dval;
        int lex__();
        int executeAction__(size_t ruleNr);

        void print();
        void preCode();     // re-implement this function for code that must 
                            // be exec'ed before the patternmatching starts
};

// $insert scannerConstructors
inline Scanner::Scanner(std::istream &in, std::ostream &out)
:
    ScannerBase(in, out)
{}

inline Scanner::Scanner(std::string const &infile, std::string const &outfile)
:
    ScannerBase(infile, outfile)
{}

// $insert inlineLexFunction
inline int Scanner::lex()
{
    return lex__();
}

inline void Scanner::preCode() 
{
    // optionally replace by your own code
}

inline void Scanner::print() 
{
    print__();
}

inline ParserBase::STYPE__ * Scanner::getSval(){
    return dval;
}

inline void Scanner::setSval(ParserBase::STYPE__ * val)
{
    dval = val;
}

inline int Scanner::get_scan_line_number()
{
    return lineNr();
}

inline void Scanner::display_token(int token_code)
{
    
    cout << "Line: " << lineNr() << " ";
    cout << "\tToken Name: " << token_name;
    cout << " \tToken: " << matched();
    cout << " \tToken Code: " << token_code << "\n";
}

inline void Scanner::store_token_name(string name)
{
    token_name = name;
}


#endif // Scanner_H_INCLUDED_

